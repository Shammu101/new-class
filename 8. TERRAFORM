DAY-01: 27-07-2023: INTRO, LIFECYCLE, BASIC FILES

INFRA: RESOURCE USED TO RUN OUR APPLICATION.
EX: SERVERS, ASG, ELB, VPC ----

1. ON-PREM: IT WAS MANAGED BY OUR IT TEAM.
2. CLOUD: CLOUD PROVIDERS (AWS, AZURE,GCP)

INFRA IN CLOUD IS CREATED MANUALLY TILL NOW:
LIMITATIONS:
1. MISTAKES WILL HAPPEN.
2. TAKES TIME.
3. INFRA CREATION LATE.

AUTOMATION:
DEVOPS: TERRAFORM, PULUMI, CHEF, ANSIBLE ----
CLOUD:
AWS - CFT
AZURE - ARM
GCP - GDE

HISTORY:

MITCHEL HASIMOTO -- > 2011 : TUMBLR -- > NO RESPONSE
YEAR: 2014
LANGUAGE: GO LANG
COMPANY: HASHICORP
TYPE: FREE AND OPENSOURCE
SPECIFICATION: INFRA CREATION
WHO IT WORKS: CODE -- > HCL (HASHICORP CONFIGURATION LANGUAGE)

ADVANTAGES:
1. AUTOMATION
2. TIME SAVING
3. REUSEABLE 
4. DRY RUN 
5. CLOUD AGONISTIC

installation:
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

PERMISSION:
attach iam user creds to ec2

CONFIGURATION FILE: It has information about our resource.
EX: .tf, .tfvars 

cat main.tf

provider "aws" {
region = "eu-west-1"
}

resource "aws_instance" "one" {
count = 3
ami = "ami-06935448000742e6b"
instance_type = "t2.micro"
}

LIFECYCLE:
terrafrom init: it will download provider plugins.
terraform plan: it will create execution plan for resource.
terraform apply: it will create the resource.
terraform destroy: it will destroy the resource.

STATE FILE: It will store the resource infromation which created by terraform.
terrafrom state list: it will list resources inside the state file

TARGET: It will destroy a particular resource in terraform
terraform destroy -target="aws_instance.one[1]"

HISTORY:


    1  mkdir terraform
    2  cd terraform/
    3  sudo yum install -y yum-utils shadow-utils
    4  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    5  sudo yum -y install terraform
    6  terraform -v
    7  cd
    8  aws configure
    9  cd terraform/
   10  ll
   11  vim main.tf
   12  terraform init
   13  terraform plan
   14  terraform apply
   15  vim main.tf
   16  cd
   17  vim .aws/config
   18  cd terraform/
   19  terraform apply
   20  ll
   21  cat terraform.tfstate
   22  terraform state list
   23  terraform destroy
   24  cat terraform.tfstate
   25  vim main.tf
   26  terraform init
   27  terraform plan
   28  terraform apply
   29  cat terraform.tfstate
   30  terraform state list
   31  cat main.tf
   32  terraform state list
   33  terraform destroy -target="aws_instance.one[1]
   34  terraform destroy -target="aws_instance.one[1]"
   35  terraform state list
   36  terraform destroy -target="aws_instance.one[2]"
   37  terraform state list
   38  cat main.tf
   39  history

===============================================================================

OUTPUTS: It will print the resource outputs 

provider "aws" {
region = "eu-west-3"
}

resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

output "raham" {
value = [aws_instance.one.public_ip, aws_instance.one.private_ip, aws_instance.one.public_dns]
}


TERRAFORM REFRESH: it will refresh the state file and shows the objects existence.
TERRAFORM TAINT: it will recreate specific resource.

provider "aws" {
region = "eu-west-3"
}

resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

resource "aws_s3_bucket" "two" {
bucket = "rahamterra443357-swiggy"
}

terraform taint aws_instance.one 
terraform apply --auto-approve


UNTAINT: To undo the tainting.
terraform untaint aws_s3_bucket.two


ALIAS & PROVIDERS:
it is used to create multiple resource on multiple regions at a time.

provider "aws" {
region = "eu-west-3"
}


resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

provider "aws" {
region = "eu-west-2"
alias = "london"
}

resource "aws_instance" "two" {
provider = aws.london
ami = "ami-0b594cc165f9cddaa"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

HISTORY:
 1  mkdir terraform
    2  cd terraform/
    3  sudo yum install -y yum-utils shadow-utils
    4  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    5  sudo yum -y install terraform
    6  aws configure
    7  vim mai.tf
    8  vim main.tf
    9  terraform init
   10  terraform
   11  terraform plan
   12  terraform apply --auto-approve
   13  vim main.tf
   14  wq
   15  terraform apply --auto-approve
   16  vim main.tf
   17  terraform apply --auto-approve
   18  terraform destroy --auto-approve
   19  vim main.tf
   20  terraform apply --auto-approve
   21  vim main.tf
   22  cat main.tf
   23  terraform apply --auto-approve
   24  vim main.tf
   25  terraform apply --auto-approve
   26  vim main.tf
   27  terraform state list
   28  terraform refresh
   29  terraform state list
   30  vim main.tf
   31  terraform apply --auto-approve
   32  terraform state list
   33  terraform taint aws_instance.one
   34  terraform apply --auto-approve
   35  terraform state list
   36  terraform taint aws_s3_bucket.two
   37  terraform apply --auto-approve
   38  cat main.tf
   39  terraform state list
   40  terraform taint aws_s3_bucket.two
   41  terraform untaint aws_s3_bucket.two
   42  vim main.tf
   43  terraform destroy --auto-approve
   44  vim main.tf
   45  terraform appl\y --auto-approve
   46  terraform apply --auto-approve
   47  terraform apply --auto-approve -lock=false
   48  ps
   49  kill -9 1427 1399 1433 1449 1463 1469
   50  ps
   51  terraform apply --auto-approve -lock=false
   52  terraform destroy --auto-approve
   53  vim main.tf
   54  terraform apply --auto-approve -lock=false
   55  vim main.tf
   56  terraform apply --auto-approve
   57  vim main.tf
   58  history

